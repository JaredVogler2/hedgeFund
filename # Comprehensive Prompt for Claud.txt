# Comprehensive Prompt for Professional ML Trading System Development

## Project Overview

I need you to develop a professional-grade, hedge fund-quality machine learning trading system in Python. This system should leverage ensemble machine learning with GPU acceleration on an NVIDIA 3070 Ti, use yfinance for all market data, integrate with Alpaca for live trading, and include OpenAI for news sentiment analysis. The system must maintain institutional-level standards with zero data leakage, proper walk-forward optimization, and realistic execution modeling.  this should work from my local PC machine.

## Core Architecture Requirements

### 1. **Data Pipeline & Infrastructure**
- **Primary data source**: yfinance with proper MultiIndex handling
- **Data storage**: Efficient caching system with pickle/parquet for historical data
- **GPU acceleration**: Full CUDA support via PyTorch, XGBoost GPU, LightGBM GPU
- **Memory management**: Efficient handling of 200+ symbols with 2+ years of history
- **Real-time updates**: WebSocket integration for live market data during trading hours

### 2. **Feature Engineering System (30+ Methods)**

Create an `EnhancedFeatureEngineer` class with the following comprehensive feature categories:

#### Price-Based Features:
- Multiple timeframe returns (1, 2, 3, 5, 10, 20, 60 days)
- Log returns for stability
- Moving averages (SMA: 5, 10, 20, 50, 100, 200; EMA: 8, 12, 21, 26, 50)
- VWAP and price-to-VWAP ratios
- Support/resistance levels (10, 20, 50, 100-day lookbacks)
- Fibonacci retracements (23.6%, 38.2%, 50%, 61.8%, 78.6%)
- Price channels and positions within channels

#### Volume Features:
- Volume moving averages and ratios
- On-Balance Volume (OBV) with divergence detection
- Accumulation/Distribution with signals
- Chaikin Money Flow
- Volume-Price Trend (VPT)
- Money Flow Index variations
- Volume profile analysis
- Volume-weighted momentum

#### Volatility Features:
- ATR at multiple timeframes with percentage calculations
- Bollinger Bands (multiple parameters: 10/20/30 periods, 1.5/2/2.5 std)
- Keltner Channels with squeeze detection
- Historical volatility (5, 10, 20, 30, 60-day)
- Parkinson, Garman-Klass, Rogers-Satchell, Yang-Zhang volatility estimators
- Volatility regime detection

#### Technical Indicators:
- RSI (7, 14, 21, 28) with divergence detection
- MACD variations (12/26/9, 5/35/5, 8/17/9) with histogram analysis
- Stochastic (14/3, 21/5, 5/3) with oversold/overbought signals
- Williams %R, CCI, MFI, ADX, Aroon, Ultimate Oscillator
- PPO, TRIX, CMO with multiple periods

#### Market Microstructure:
- Bid-ask spread proxies
- Intraday momentum and volatility
- Order flow imbalance estimation
- Amihud illiquidity measure
- Kyle's lambda
- Microstructure noise ratio

#### Pattern Recognition:
- 16+ candlestick patterns via TA-Lib
- Custom patterns: Pin bars, Inside/Outside bars
- Consecutive up/down days
- Pattern strength and combination scoring

#### Advanced Interaction Features:
- **Golden Cross/Death Cross**: With days since occurrence tracking
- **MA Crossovers**: Short-term (5/20), medium-term (20/50)
- **Divergences**: RSI, MACD, OBV vs price
- **Volume-Price Confirmations**: Directional alignment
- **Bollinger/Keltner Squeeze**: TTM squeeze indicator
- **Support/Resistance Interactions**: With technical indicators
- **Multi-timeframe Momentum Alignment**: Across 5/10/20 day periods
- **Composite Scores**: Bull market score, mean reversion setup, breakout setup, trend exhaustion

#### Statistical Features:
- Rolling skewness and kurtosis (5, 10, 20, 50 periods)
- Jarque-Bera test statistics
- Autocorrelation at multiple lags
- Hurst exponent for mean reversion/trending
- Shannon entropy for complexity
- Z-scores and percentile ranks

#### ML-Discovered Features:
- Polynomial features for key indicators
- Fourier transforms for cyclical patterns
- Wavelet decomposition
- Fractal dimension
- Sample entropy

#### Cross-Asset Features:
- VIX level and term structure
- Yield curve slope (10Y-2Y)
- Dollar index strength
- Sector relative performance
- Correlation with market indices

### 3. **Ensemble Machine Learning System**

Implement a sophisticated ensemble with the following components:

#### Base Models:
1. **XGBoost** (GPU-accelerated)
   - Multi-output for classification + regression
   - Custom objective for risk-adjusted returns
   - Quantile regression for uncertainty

2. **LightGBM** (GPU support)
   - Categorical feature handling
   - DART mode for better generalization
   - Custom focal loss for imbalanced data

3. **CatBoost** (GPU)
   - Automatic categorical encoding
   - Ordered boosting
   - Built-in overfitting detection

4. **Deep Learning Models**:
   - **Attention LSTM**: Multi-head attention with residual connections
   - **CNN-LSTM**: Multi-scale convolution for pattern extraction
   - **Transformer**: Full self-attention for sequence modeling
   - **TSMamba**: State-space model for efficient long sequences

#### Advanced ML Features:
- **Multi-task learning**: Simultaneous prediction of 1/5/10/21-day returns
- **Quantile regression**: Full return distribution (10th, 25th, 50th, 75th, 90th percentiles)
- **Isotonic calibration**: Probability calibration for all models
- **Meta-learner**: Stacked generalization with cross-validation
- **Online learning**: Incremental updates without full retraining

#### Training Enhancements:
- **Purged walk-forward cross-validation**: No data leakage
- **Sample weighting**: Age-based decay (60-day half-life)
- **Catalyst segmentation**: Separate handling of earnings/FOMC periods
- **Adaptive learning rates**: Cyclical LR with warm restarts
- **Early stopping**: With patience and validation monitoring

### 4. **Signal Generation & Risk Management**

#### Signal Generation:
- **Bayesian scoring**: `(win_probability Ã— expected_return) / predicted_volatility`
- **Ensemble agreement**: Minimum 60% model consensus
- **Feature quality score**: Based on key technical alignments
- **Market regime filters**: Avoid high VIX (>30) and bear markets
- **Liquidity requirements**: Minimum $1M daily volume

#### Position Sizing:
- **Kelly Criterion**: With 25% fractional Kelly for safety
- **Risk parity**: Equal risk contribution across positions
- **Dynamic sizing**: Based on volatility and correlation
- **Maximum position limits**: 10% per position, 30% per sector

#### Risk Controls:
- **Dynamic stops**: Based on ATR and predicted quantiles
- **Portfolio heat**: Maximum 8% total portfolio risk
- **Correlation limits**: Avoid concentrated bets
- **Regime-based adjustments**: Reduce exposure in high volatility

### 5. **Backtesting Engine**

Professional-grade backtesting with:

#### Core Features:
- **Walk-forward optimization**: 12-month train, 3-month validate, 1-month test
- **Realistic execution**: Slippage, market impact, commissions
- **Multiple testing periods**: Rolling windows across different market regimes
- **Transaction cost modeling**: Square-root market impact model

#### Performance Metrics:
- Sharpe, Sortino, Calmar ratios
- Maximum drawdown and recovery time
- Win rate, profit factor, average win/loss
- Risk-adjusted returns (Information ratio)
- Tail ratios and conditional VaR

#### Analysis Tools:
- Performance attribution by feature groups
- Regime-specific performance analysis
- Feature importance evolution
- Model degradation detection

### 6. **Dashboard System**

Create a comprehensive Streamlit/Dash dashboard with:

#### Portfolio View:
- Current positions with real-time P&L
- Portfolio value chart with drawdown visualization
- Risk metrics and exposure analysis
- Sector/asset allocation pie charts

#### Predictions View:
- Watchlist with ML predictions and confidence scores
- Expected return distributions (quantile forecasts)
- Risk/reward scatter plots
- Signal strength indicators

#### ML Analytics:
- Feature importance rankings with evolution
- Model performance metrics over time
- Prediction calibration plots
- Training/validation curves

#### Trade History:
- Recent trades with entry/exit analysis
- Win/loss distribution
- Trade attribution (which features drove decisions)
- Execution quality metrics

#### Market Overview:
- Regime indicators (volatility, trend strength)
- Sector rotation analysis
- Breadth indicators
- News sentiment summary

### 7. **Live Trading Integration**

#### Alpaca API Integration:
```python
class AlpacaTradingEngine:
    - Account management and position tracking
    - Order placement with smart routing
    - Real-time P&L calculation
    - Risk limit enforcement
    - Order type selection (market/limit/stop)
    - Partial fill handling
```

#### Execution Logic:
- Pre-market signal generation (9:00 AM)
- Market open execution (9:30-9:45 AM)
- Position monitoring throughout day
- End-of-day reconciliation
- After-hours analysis

### 8. **News Sentiment Integration**

#### OpenAI Integration:
```python
class NewsAnalyzer:
    - Fetch news from multiple sources
    - GPT-4 sentiment analysis
    - Entity extraction and relevance scoring
    - Event categorization (earnings, upgrades, M&A)
    - Sentiment aggregation by timeframe
```

#### Features Generated:
- Sentiment scores (-1 to 1)
- News volume/intensity
- Sentiment momentum
- Event flags for catalyst detection

### 9. **Watchlist Management**

Comprehensive watchlist of 200+ symbols including:
- S&P 500 leaders
- High-momentum stocks
- Sector ETFs
- International ADRs
- Commodity/currency proxies

With automatic updates for:
- Liquidity screening
- Corporate actions
- Delisting handling
- Sector rebalancing

### 10. **Automation & Scheduling**

#### Nightly Jobs (2 AM - 6 AM):
1. Data download and validation
2. Feature engineering for all symbols
3. Model retraining with new data
4. Backtest on recent period
5. Signal generation for next day
6. Report generation

#### Market Hours Automation:
- 8:30 AM: Final data refresh
- 9:00 AM: Generate trading signals
- 9:15 AM: Send notifications
- 9:30 AM: Execute trades
- 3:45 PM: End-of-day analysis
- 4:30 PM: Performance report

### 11. **Code Structure**

```
ml_trading_system/
â”œâ”€â”€ config/
â”‚   â”œâ”€â”€ settings.py          # System configuration
â”‚   â”œâ”€â”€ watchlist.py         # Symbol lists
â”‚   â””â”€â”€ credentials.py       # API keys (encrypted)
â”œâ”€â”€ data/
â”‚   â”œâ”€â”€ pipeline.py          # Data fetching and caching
â”‚   â”œâ”€â”€ features.py          # Feature engineering (30+ methods)
â”‚   â””â”€â”€ market_data.py       # Real-time data handling
â”œâ”€â”€ models/
â”‚   â”œâ”€â”€ ensemble.py          # Multi-model ensemble
â”‚   â”œâ”€â”€ deep_learning.py     # Neural network architectures
â”‚   â”œâ”€â”€ calibration.py       # Probability calibration
â”‚   â””â”€â”€ training.py          # Training orchestration
â”œâ”€â”€ signals/
â”‚   â”œâ”€â”€ generator.py         # Signal generation logic
â”‚   â”œâ”€â”€ filters.py           # Risk and regime filters
â”‚   â””â”€â”€ scoring.py           # Bayesian scoring system
â”œâ”€â”€ risk/
â”‚   â”œâ”€â”€ position_sizing.py   # Kelly and risk parity
â”‚   â”œâ”€â”€ portfolio.py         # Portfolio optimization
â”‚   â””â”€â”€ limits.py            # Risk limit enforcement
â”œâ”€â”€ execution/
â”‚   â”œâ”€â”€ alpaca_client.py     # Alpaca integration
â”‚   â”œâ”€â”€ order_manager.py     # Order execution logic
â”‚   â””â”€â”€ simulator.py         # Paper trading mode
â”œâ”€â”€ analysis/
â”‚   â”œâ”€â”€ backtest.py          # Backtesting engine
â”‚   â”œâ”€â”€ metrics.py           # Performance calculations
â”‚   â””â”€â”€ attribution.py       # Return attribution
â”œâ”€â”€ sentiment/
â”‚   â”œâ”€â”€ news_fetcher.py      # News data collection
â”‚   â”œâ”€â”€ openai_analyzer.py   # GPT-4 integration
â”‚   â””â”€â”€ aggregator.py        # Sentiment aggregation
â”œâ”€â”€ dashboard/
â”‚   â”œâ”€â”€ app.py               # Main dashboard
â”‚   â”œâ”€â”€ portfolio_view.py    # Portfolio components
â”‚   â”œâ”€â”€ ml_view.py           # ML analytics
â”‚   â””â”€â”€ market_view.py       # Market overview
â”œâ”€â”€ automation/
â”‚   â”œâ”€â”€ scheduler.py         # Job scheduling
â”‚   â”œâ”€â”€ nightly_jobs.py      # Overnight processing
â”‚   â””â”€â”€ trading_bot.py       # Live trading automation
â””â”€â”€ utils/
    â”œâ”€â”€ logger.py            # Logging configuration
    â”œâ”€â”€ database.py          # Data persistence
    â””â”€â”€ notifications.py     # Alert system
```

### 12. **Performance Requirements**

- Nightly retraining: < 2 hours for 200 symbols
- Signal generation: < 5 minutes for full universe
- Latency: < 100ms for trade execution
- Dashboard refresh: Real-time during market hours
- Backtest: < 30 minutes for 1-year period

### 13. **Professional Standards**

- **No data leakage**: Strict temporal separation
- **No survivorship bias**: Include delisted symbols
- **Realistic costs**: Full transaction cost modeling
- **Risk management**: Multiple fail-safes
- **Audit trail**: Complete logging of all decisions
- **Error handling**: Graceful degradation
- **Monitoring**: Real-time system health checks

This system should be capable of generating 5-15 high-confidence trades daily with institutional-grade risk management and performance tracking. All components must work together seamlessly with proper error handling and logging throughout.